import { IByteBuffer } from "./byteBuffer";
import { IByteData } from "./byteData";
import { Endian, IEndian } from "./endian";
import { ITypedData } from "./typedData";
export interface IUnmodifiableByteDataView {
    getInt8: (byteOffset: number) => number;
    setInt8: (byteOffset: number, value: number) => void;
    getUint8: (byteOffset: number) => number;
    setUint8: (byteOffset: number, value: number) => void;
    getInt16: (byteOffset: number, endian: IEndian) => number;
    setInt16: (byteOffset: number, value: number, endian: IEndian) => void;
    getUint16: (byteOffset: number, endian: IEndian) => number;
    setUint16: (byteOffset: number, value: number, endian: IEndian) => void;
    getInt32: (byteOffset: number, endian: IEndian) => number;
    setInt32: (byteOffset: number, value: number, endian: IEndian) => void;
    getUint32: (byteOffset: number, endian: IEndian) => number;
    setUint32: (byteOffset: number, value: number, endian: IEndian) => void;
    getInt64: (byteOffset: number, endian: IEndian) => number;
    setInt64: (byteOffset: number, value: number, endian: IEndian) => void;
    getUint64: (byteOffset: number, endian: IEndian) => number;
    setUint64: (byteOffset: number, value: number, endian: IEndian) => void;
    getFloat32: (byteOffset: number, endian: IEndian) => number;
    setFloat32: (byteOffset: number, value: number, endian: IEndian) => void;
    getFloat64: (byteOffset: number, endian: IEndian) => number;
    setFloat64: (byteOffset: number, value: number, endian: IEndian) => void;
    getElementSizeInBytes: () => number;
    getOffsetInBytes: () => number;
    getLengthInBytes: () => number;
    getBuffer: () => IByteBuffer;
    toString: () => string;
    getHashCode: () => number;
}
